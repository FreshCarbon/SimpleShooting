using System.Collections;
using UnityEngine;

// 총을 구현한다
public class Gun : MonoBehaviour
{
    // 총의 상태를 표현하는데 사용할 타입을 선언한다
    public enum State
    {
        Ready, // 발사 준비됨
        Empty, // 탄창이 빔
        Reloading // 재장전 중
    }

    public State state { get; private set; } // 현재 총의 상태        

    public Transform fireTransform; // 총알이 발사될 위치

    public ParticleSystem muzzleFlashEffect; // 총구 화염 효과
    //public ParticleSystem shellEjectEffect; // 탄피 배출 효과

    private LineRenderer bulletLineRenderer; // 총알 궤적을 그리기 위한 렌더러

    public GunData gunData; //총의 현재 데이터

    private AudioSource gunAudioPlayer; // 총 소리 재생기
    public AudioClip shotClip; // 발사 소리
    public AudioClip reloadClip; // 재장전 소리

    private float fireDistance = 50f; // 사정거리

    //public int ammoRemain; // 남은 전체 탄약
    public int magAmmo; // 현재 탄창에 남아있는 탄약

    //public float timeBetFire = 0.12f; // 총알 발사 간격
    public float reloadTime = 1.8f; // 재장전 소요 시간
    private float lastFireTime; // 총을 마지막으로 발사한 시점

    private void Awake()
    {
        // 사용할 컴포넌트들의 참조를 가져오기
        gunAudioPlayer = GetComponent<AudioSource>();
        bulletLineRenderer = GetComponent<LineRenderer>();

        //사용할 경우를 두 개로 변경, 라인 렌더러가 사용할 점의 수를 2로 변경
        bulletLineRenderer.positionCount = 2;
        // 라인 렌더러를 비활성화 인스펙터에서 하긴 했지만 코드로 확실하게
        bulletLineRenderer.enabled = false;
    }

    //컴포넌트가 활성화 될 때 실행됨 총이 활성화 될 때 총의 상태와 기본 탄알 초기화
    private void OnEnable()
    {
        //전체 예비 탄알 양을 초기화
        //ammoRemain = gunData.startAmmoRemain;
        //현재 탄창을 가득 채우기
        magAmmo = gunData.magCapacity;

        //총의 현재 상태를 총을 쏠 준비가 된 상태로 변경
        state = State.Ready;
        //마지막으로 총을 쏜 시점 초기화
        lastFireTime = 0;

        // 오디오 클립이 제대로 할당되었는지 확인
        if (shotClip == null)
        {
            Debug.LogError("ShotClip이 할당되지 않았습니다.");
        }

        if (reloadClip == null)
        {
            Debug.LogError("ReloadClip이 할당되지 않았습니다.");
        }
    }

    // 발사 시도
    public void Fire()
    {
        //현재 상태가 발사 가능한 상태, 마지막 총 발사 시점에서 gunData.timeBetFire 이상의 시간이 지남
        if (state == State.Ready && Time.time >= lastFireTime + gunData.timeBetFire)
        {
            //마지막 총 발사 시점 갱신
            lastFireTime = Time.time;
            //실제 발사 처리
            Shot();
        }
    }

    // 실제 발사 처리
    private void Shot()
    {
        //레이캐스트에 의한 충돌 정보를 저장하는 컨테이너
        RaycastHit hit;
        //탄알이 맞은 곳을 저장할 변수
        Vector3 hitPosition = Vector3.zero;

        // 레이캐스트(시작 지점, 방향, 충돌정보 컨테이너, 사정거리)
        if (Physics.Raycast(fireTransform.position, fireTransform.forward, out hit, fireDistance))
        {
            //레이가 어떤 물체와 충돌한 경우 충돌한 상대방으로부터 IDamageable 가져오기 시도
            IDamageable target = hit.collider.GetComponent<IDamageable>();

            //상대방으로부터 IDamageable 오브젝트를 가져오는데에 성공했다면
            if (target != null)
            {
                //상대방의 OnDamage 함수를 실행시켜 상대방에 대미지 주기
                target.OnDamage(gunData.damage, hit.point, hit.normal);
            }
            hitPosition = hit.point;
        }
        else
        {
            //레이가 다른 물체와 충돌하지 않았따면
            //탄알이 최대 사정거리까지 날아갔을 떄의 위치를 충돌 위치로 사용
            hitPosition = fireTransform.position + fireTransform.forward * fireDistance;
        }

        //발사 이펙트 재생 시작
        StartCoroutine(ShotEffect(hitPosition));

        //남은 탄알수 -1
        magAmmo--;
        if (magAmmo <= 0)
        {
            //남은 탄알이 없다면 총의 상태를 empty로 변경
            state = State.Empty;
        }
    }

    // 발사 이펙트와 소리를 재생하고 총알 궤적을 그린다
    private IEnumerator ShotEffect(Vector3 hitPosition)
    {
        //총구 화염 효과 재생
        muzzleFlashEffect.Play();
        //탄피 배출 효과 재생
        //shellEjectEffect.Play();

        //총격 소리 재생, playOneShot은 소리를 정지하지 않고 중첩하여 재생하게 해줌
        if (shotClip != null && gunAudioPlayer != null)
        {
            gunAudioPlayer.PlayOneShot(shotClip);
        }
        else
        {
            Debug.LogError("ShotClip or AudioSource null");
        }

        //선의 시작점은 총구의 위치, transform을 통해 총구의 위치 받아옴
        bulletLineRenderer.SetPosition(0, fireTransform.position);
        //선의 끝 점은 입력으로 들어온 충돌 위치 , 0에서 1 사이의 선을 그림
        bulletLineRenderer.SetPosition(1, hitPosition);
        //라인 렌더러를 활성화하여 탄알 궤적을 그림
        bulletLineRenderer.enabled = true;

        // 0.03초 동안 잠시 처리를 대기
        yield return new WaitForSeconds(0.03f);

        // 라인 렌더러를 비활성화하여 총알 궤적을 지운다
        bulletLineRenderer.enabled = false;
    }

    // 재장전 시도
    public bool Reload()
    {
        if (state == State.Reloading || /*ammoRemain <= 0 ||*/ magAmmo >= gunData.magCapacity)
        {
            //재장전 중이거나 총알이 가득찬 경우에만
            return false;
        }
        StartCoroutine(ReloadRoutine());
        return true;
    }

    // 실제 재장전 처리를 진행
    private IEnumerator ReloadRoutine()
    {
        // 현재 상태를 재장전 중 상태로 전환
        state = State.Reloading;

        if (reloadClip != null && gunAudioPlayer != null)
        {
            gunAudioPlayer.PlayOneShot(reloadClip);
        }
        else
        {
            Debug.LogError("ReloadClip 또는 AudioSource가 null입니다.");
        }

        // 재장전 소요 시간 만큼 처리를 쉬기
        yield return new WaitForSeconds(gunData.reloadTime);

        magAmmo = gunData.magCapacity;
        state = State.Ready;
        
        //탄창에 채울 탄알 계산
        /*int ammoToFill = gunData.magCapacity - magAmmo;

        if (ammoRemain > 0)
        {
            if (ammoToFill <= ammoRemain)
            {
                // 장전할 총알이 남아 있는 경우
                magAmmo += ammoToFill;
                ammoRemain -= ammoToFill;
                state = State.Ready;
            }
            else
            {
                // 남은 총알이 탄창을 채우지 못하는 경우
                magAmmo += ammoRemain;
                ammoRemain = 0;
                state = State.Ready;
            }
        }*/
    }
}
